@model QuestionnaireViewModel

@{
  ViewData["Title"] = "Edit the questionnaire";
  var hasErrors = Model?.UpdateQuestionnaire != null && !ViewData.ModelState.IsValid;
  string? ErrorFor(string key) => ViewData.ModelState.ContainsKey(key) && ViewData.ModelState[key]?.Errors.Count > 0
    ? ViewData.ModelState[key]!.Errors[0].ErrorMessage
    : null;

  var hasTitleError = Model?.UpdateQuestionnaire != null && ErrorFor(nameof(Model.UpdateQuestionnaire.Title)) != null;
  var hasDescError = Model?.UpdateQuestionnaire != null && ErrorFor(nameof(Model.UpdateQuestionnaire.Description)) != null;
}

@section BeforeContent
{
  <a class="govuk-back-link govuk-!-display-none-print" href="/admin/questionnaires/@Model?.UpdateQuestionnaire?.Id/Track">Back to questionnaire '@Model?.UpdateQuestionnaire?.Title'</a>
}

@if (hasErrors)
{
  <div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="govuk-error-summary">
    <h2 class="govuk-error-summary__title" id="error-summary-title">
      There is a problem
    </h2>
    <div class="govuk-error-summary__body">
      <ul class="govuk-list govuk-error-summary__list">
        @foreach (var kvp in ViewData.ModelState.Where(ms => ms.Value!.Errors.Count > 0))
        {
          var fieldName = kvp.Key;
          var message = kvp.Value!.Errors[0].ErrorMessage;
          // The href should link to the input id for accessibility
          <li><a href="#@fieldName">@message</a></li>
        }
      </ul>
    </div>
  </div>
}

<div class="govuk-grid-row">
  <div class="govuk-grid-column-two-thirds">
    <form action="/admin/questionnaires/@Model?.UpdateQuestionnaire?.Id/edit" accept-charset="UTF-8" method="post">
      <div class="govuk-form-group">
        <h1 class="govuk-label-wrapper">
          <label for="forms-name-input-name-field" class="govuk-label govuk-label--l">Change the title of your questionnaire</label>
        </h1>
        <div class="govuk-hint" id="forms-name-input-name-hint">The form name will be shown at the top of each page of the form. Use a name
          that describes what the form will help people to do. For example ‘Apply for a
          juggling licence’.
        </div>
        @if (hasTitleError)
        {
          <p class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span> @ErrorFor(nameof(Model.UpdateQuestionnaire.Title))
          </p>
        }

        <input id="forms-name-input-name-field" class="govuk-input @(hasTitleError ? "govuk-input--error" : "")"
               aria-describedby="forms-name-input-name-hint"
               type="text"
               name="Title"
               value="@(Model?.UpdateQuestionnaire?.Title ?? "")">
      </div>
      <div class="govuk-form-group">
        <label for="pages-question-input-hint-text-field" class="govuk-label">Hint text (optional)</label>
        <div class="govuk-hint" id="pages-question-input-hint-text-hint">You can add a short description of what the questionnaire is about.</div>
        @if (hasDescError)
        {
          <p class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span> @ErrorFor(nameof(Model.UpdateQuestionnaire.Description))
          </p>
        }
        <textarea class="govuk-textarea @(hasDescError ? "govuk-textarea--error" : "")"
              id="Description"
              name="Description"
              rows="5">@(Model?.UpdateQuestionnaire?.Description ?? "")</textarea>
      </div>
      <button type="submit" formnovalidate="formnovalidate" class="govuk-button" data-module="govuk-button" data-prevent-double-click="true" data-govuk-button-init="">Save and continue</button>
    </form>
  </div>
</div>