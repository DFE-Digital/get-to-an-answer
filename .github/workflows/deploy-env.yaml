name: Deploy - Environment

on:
  push:
    branches:
      - main
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to deploy to'
        required: true
        default: 'Development'
        options:
          - Development
          - Test

run-name: ${{ github.event_name == 'push' && 'Build & Deploy to Test' || format('Deploy to {0}', github.event_name == 'release' && 'Production' || github.event.inputs.environment) }}

jobs:
  validate_apps:
    if: github.event_name == 'push' || github.event_name == 'release'
    name: Validate Web
    uses: ./.github/workflows/validate-apps.yaml

  tag_release:
    if: github.event_name == 'push'
    name: Create New Tag
    runs-on: ubuntu-latest
    needs: [ validate_apps ]
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main

  package:
    name: 'Package Apps in Docker'
    runs-on: ubuntu-latest
    needs: [ validate_apps, tag_release ]
    if: always() && (needs.tag_release.result == 'success' || (github.event_name == 'release' && needs.validate_apps.result == 'success') || github.event_name == 'workflow_dispatch')
    defaults:
      run:
        working-directory: ./src
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.set_tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Lowercase the repo name and username
        run: echo "REPO=$(basename "$GITHUB_REPOSITORY" | tr -d '-')" >>${GITHUB_ENV}

      - name: Set Docker image tag
        id: set_tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "Using release tag for versioning: ${{ github.ref_name }}"
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Using new auto-generated tag for versioning: ${{ needs.tag_release.outputs.new_tag }}"
            echo "tag=${{ needs.tag_release.outputs.new_tag }}" >> $GITHUB_OUTPUT
          else
            echo "Using commit SHA for versioning for manual run"
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build Admin Docker Image
        run: |
          docker build . -t ghcr.io/${{ env.REPO }}-admin:${{ steps.set_tag.outputs.tag }} -f Admin/Dockerfile

      - name: Build Api Docker Image
        run: |
          docker build . -t ghcr.io/${{ env.REPO }}-api:${{ steps.set_tag.outputs.tag }} -f Api/Dockerfile

      - name: Build Frontend Docker Image
        run: |
          docker build . -t ghcr.io/${{ env.REPO }}-frontend:${{ steps.set_tag.outputs.tag }} -f Frontend/Dockerfile

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Admin Docker Image
        run: docker push ghcr.io/${{ env.REPO }}-admin:${{ steps.set_tag.outputs.tag }}

      - name: Push Api Docker Image
        run: docker push ghcr.io/${{ env.REPO }}-api:${{ steps.set_tag.outputs.tag }}

      - name: Push Frontend Docker Image
        run: docker push ghcr.io/${{ env.REPO }}-frontend:${{ steps.set_tag.outputs.tag }}

  deploy_environment:
    name: Deploying apps to ${{ (github.event_name == 'release' && 'Production') || (github.event_name == 'push' && 'Test') || github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [ package ]
    permissions:
      contents: read
      id-token: write
    environment:
      name: ${{ (github.event_name == 'release' && 'Production') || (github.event_name == 'push' && 'Test') || github.event.inputs.environment }}
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
      TF_VAR_sql_admin_username: ${{ secrets.SQL_ADMIN_USERNAME }}
      TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}
    steps:
      - name: Set dynamic variables
        id: vars
        run: |
          ENV_NAME="${{ (github.event_name == 'release' && 'Production') || (github.event_name == 'push' && 'Test') || github.event.inputs.environment }}"
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
          echo "Deployment Environment: $ENV_NAME"

          if [[ "${{ github.event_name }}" == "release" ]]; then
            BODY="${{ github.event.release.body }}"
          fi

      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.10.4

      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          creds: |
            {
                "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
                "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
                "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
                "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      - name: Create TF State dependencies
        uses: azure/cli@v2
        env:
          ENVIRONMENT_PREFIX: 
          CIP_ENVIRONMENT: ${{ vars.CIP_ENVIRONMENT }}
        with:
          azcliversion: latest
          inlineScript: |
            az group create --name s263${ENVIRONMENT_PREFIX}-cl-tfstate --location westeurope --output none --tags "Environment=${CIP_ENVIRONMENT}" "Product=Get-To-An-Answer" "Service=Newly onboarded" "Service offering=Get-To-An-Answer"
            az storage account create --name s263${ENVIRONMENT_PREFIX}cltfstate --resource-group s263${ENVIRONMENT_PREFIX}-cl-tfstate --location westeurope --sku Standard_LRS
            az storage container create --name tfstate --account-name s263${ENVIRONMENT_PREFIX}cltfstate

      - name: 'Terraform Init'
        id: terraform_init
        working-directory: ./src/infrastructure/terraform
        env:
          ENVIRONMENT_PREFIX: 
        run: terraform init

      - name: 'Terraform Plan'
        id: terraform_plan
        working-directory: ./src/infrastructure/terraform
        run: terraform plan -var-file=${{ github.event.inputs.environment }}.tfvars -out=tfplan

      - name: 'Terraform Apply'
        id: terraform_apply
        working-directory: ./src/infrastructure/terraform
        run: terraform apply -auto-approve tfplan

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy Admin (MVC) to Azure Web App
        id: deploy-admin
        uses: azure/webapps-deploy@v3
        with:
          app-name: s263-app-admin
          slot-name: 'staging'
          images: 'ghcr.io/${{ env.REPO }}-admin:${{ needs.package.outputs.image_tag }}'

      - name: Swap Admin slot to production
        run: az webapp deployment slot swap --name s263-app-admin --resource-group s263-cl-admin-rg --slot staging --target-slot production

      - name: Delete Admin staging slot
        run: az webapp deployment slot delete --name s263-app-admin --resource-group s263-cl-admin-rg --slot staging

      - name: Deploy Api to Azure Web App
        id: deploy-api
        uses: azure/webapps-deploy@v3
        with:
          app-name: s263-app-api
          slot-name: 'staging'
          images: 'ghcr.io/${{ env.REPO }}-api:${{ needs.package.outputs.image_tag }}'

      - name: Swap Api slot to production
        run: az webapp deployment slot swap --name s263-app-api --resource-group s263-cl-api-rg --slot staging --target-slot production

      - name: Delete Api staging slot
        run: az webapp deployment slot delete --name s263-app-api --resource-group s263-cl-api-rg --slot staging

      - name: Deploy Frontend (MVC) to Azure Web App
        id: deploy-frontend
        uses: azure/webapps-deploy@v3
        with:
          app-name: s263-app-frontend
          slot-name: 'staging'
          images: 'ghcr.io/${{ env.REPO }}-frontend:${{ needs.package.outputs.image_tag }}'

      - name: Swap Frontend slot to production
        run: az webapp deployment slot swap --name s263-app-frontend --resource-group s263-cl-frontend-rg --slot staging --target-slot production

      - name: Delete Frontend staging slot
        run: az webapp deployment slot delete --name s263-app-frontend --resource-group s263-cl-frontend-rg --slot staging