name: Deploy Azure Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - Development
          - Test

jobs:
  terraform:
    name: "Deploy"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_sql_admin_username: ${{ secrets.SQL_ADMIN_USERNAME }}
      TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}
      TF_VAR_api_custom_domain: ${{ vars.API_CUSTOM_DOMAIN }}
      TF_VAR_admin_custom_domain: ${{ vars.ADMIN_CUSTOM_DOMAIN }}
      TF_VAR_frontend_custom_domain: ${{ vars.FRONTEND_CUSTOM_DOMAIN }}
      TF_VAR_support_alert_email: ${{ secrets.SUPPORT_ALERT_EMAIL }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: ./src/Infrastructure/terraform

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v5

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Azure Login"
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ env.ARM_CLIENT_ID }}",
              "clientSecret": "${{ env.ARM_CLIENT_SECRET }}",
              "tenantId": "${{ env.ARM_TENANT_ID }}",
              "subscriptionId": "${{ env.ARM_SUBSCRIPTION_ID }}"
            }

      - name: Lowercase the repo name and username
        run: echo "ENVIRONMENT_LOWER=${ENVIRONMENT,,}" >>${GITHUB_ENV}

      - name: Check if remote state exists
        id: tfstate
        run: |
          set -e
          KEY="${{ env.ENVIRONMENT_LOWER }}.tfstate"
          # Try to stat the blob; exit code 0 if exists
          if az storage blob exists \
               --auth-mode login \
               --account-name gtaatfstatesa \
               --container-name tfstate \
               --name "$KEY" \
               --query exists -o tsv | grep -q true; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
    
      - name: Terraform Init (migrate or reconfigure)
        run: |
          COMMON='-backend-config="resource_group_name=${{ vars.GTAA_PREFIX }}rg-uks-terraform-state" -backend-config="storage_account_name=gtaatfstatesa" -backend-config="container_name=tfstate" -backend-config="key=${{ env.ENVIRONMENT_LOWER }}.tfstate"'
          if [ "${{ steps.tfstate.outputs.exists }}" = "true" ]; then
            echo "Remote state exists -> reconfigure"
            eval terraform init -reconfigure $COMMON
          else
            echo "Remote state missing -> migrate local state"
            eval terraform init -migrate-state $COMMON
          fi

      - name: "Terraform Plan"
        run: terraform plan -var-file=${{ env.ENVIRONMENT_LOWER }}.tfvars -out=tfplan

      - name: "Terraform Apply"
        run: terraform apply -auto-approve tfplan